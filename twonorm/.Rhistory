}
binsamplein<-function(bn,bp){
bn<-as.numeric(bn)
bp<-as.numeric(bp)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-rbinom(n=bn,size=bn,prob=bp)
data<-binomialnorm(bn,bp)
bmin<-qbinom(p=0.025, size=bn, prob=bp)
bmax<-qbinom(p=0.975, size=bn, prob=bp)
bins<-(bmax-bmin)/30
datadf<-data.frame(data)
bmean=bn*bp
bsd=sqrt(bn*bp*(1-bp))
binhist<-ggplot(datadf,aes(data))+geom_histogram(aes(y=..density..),binwidth=bins,color='black',fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=bmean,sd=bsd),color="black",size=1)+
labs(x=paste("Counts when n = ",bn," and p = ",bp),y="Frequency")+ggtitle(paste("Binomial Random Variable with mean = np = ",bmean," and st.dev.= sqrt(np(1-p)) = ",round(bsd,3)))
}
binsample()
binsample()
plot(dnorm(mean=180,sd=sqrt(180*0.1)))
plot(x=dnorm(mean=180,sd=sqrt(180*0.1)))
x=dnorm(mean=180,sd=sqrt(180*0.1))
y=dnorm(x=seq(1,100,0.1),mean=180,sd=sqrt(180*0.1))
plot(y)
histogram(y)
y=dnorm(x=seq(1,200,0.1),mean=180,sd=sqrt(180*0.1))
plot(y)
histogram(y)
sqrt(180*0.1)
(30-mean)/sdiv
mean=180
sdiv=4.24
(30-mean)/sdiv
xrange=c(mean-3*sdiv,mean+3*sdiv)
library(ggplot2)
binomialnorm<-function(nsize,theta){
if (theta<0){
print("theta must be between 0 and 1")
}else if (theta >1){
print("theta must be between 0 and 1")
}else {
dataset<-rbinom(n=nsize,size=nsize,prob=theta)
return(dataset)
}}
binsample<-function(){
bn<-as.numeric(readline("How many times was the experiment run? (we need an 'n' here): "))
bp<-as.numeric(readline("What is the probability of success? (we need a 'p' here): "))
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-rbinom(n=bn,size=bn,prob=bp)
data<-binomialnorm(bn,bp)
datadf<-data.frame(data)
bmin<-qbinom(p=0.025, size=bn, prob=bp)
bmax<-qbinom(p=0.975, size=bn, prob=bp)
bins<-(bmax-bmin)/30
bmean=bn*bp
bsd=sqrt(bn*bp*(1-bp))
binhist<-ggplot(datadf,aes(data))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=bmean,sd=bsd),color="black",size=1)+
labs(x=paste("Binomial Random Variable with mean=np= ",bmean," and st.dev.=sqrt(np(1-p))= ",round(bsd,3)),y="Frequency")
}
binsamplein<-function(bn,bp){
bn<-as.numeric(bn)
bp<-as.numeric(bp)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-rbinom(n=bn,size=bn,prob=bp)
data<-binomialnorm(bn,bp)
bmin<-qbinom(p=0.025, size=bn, prob=bp)
bmax<-qbinom(p=0.975, size=bn, prob=bp)
bins<-(bmax-bmin)/30
datadf<-data.frame(data)
bmean=bn*bp
bsd=sqrt(bn*bp*(1-bp))
binhist<-ggplot(datadf,aes(data))+geom_histogram(aes(y=..density..),binwidth=bins,color='black',fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=bmean,sd=bsd),color="black",size=1)+
labs(x=paste("Counts when n = ",bn," and p = ",bp),y="Frequency")+ggtitle(paste("Binomial Random Variable with mean = np = ",bmean," and st.dev.= sqrt(np(1-p)) = ",round(bsd,3)))
}
binsamplein(100000,0.61)
binsamplein(10000,0.61)
binsamplein(1000,0.61)
binsamplein(100,0.61)
binsamplein(10,0.61)
binsamplein(1000,0.5)
binsamplein(1000,0.5)
binsamplein(1000,0.4)
binsamplein(1000,0.1)
binsamplein(1000,0.01)
binsamplein(1000,0.001)
binsamplein(1000,0.999)
n = 10
p= .6
plot(0:n,rep(0,n+1), type='h',ylim=c(0,1.1*dbinom(n*p,n,p)))   # intitialize plot
y <- vector()  #intitialize y as a vector
i <- 1
while  ( i <= (n+1)){
y[i] <- dbinom(i-1,n,p)
rect(i-1.5, 0,i-.5, y[i] , density = 30, col = "red", angle = 30, border = T)  # make rectangles for binom prob's
i <- i +1
}
s <- seq(0,n,0.01)
lines(s, dnorm(s,n*p,sqrt(n*p*(1-p))), type="l")  # plot normal
n = 100
p= .98
plot(0:n,rep(0,n+1), type='h',ylim=c(0,1.1*dbinom(n*p,n,p)), xlim= c(85,100))   # intitialize plot
y <- vector()  #intitialize y as a vector
i <- 1
while  ( i <= (n+1)){
y[i] <- dbinom(i-1,n,p)
rect(i-1.5, 0,i-.5, y[i] , density = 30, col = "red", angle = 30, border = T)  # make rectangles for binom prob's
i <- i +1
}
s <- seq(0,n,0.01)
lines(s, dnorm(s,n*p,sqrt(n*p*(1-p))), type="l")  # plot normal approximation
prob.binom <- 0
for (i in 97:100){
prob.binom <- prob.binom + dbinom(i,n,p)
}
prob.binom
(prob.norm <-  pnorm(97, n*p, sqrt(n*p*(1-p)), lower.tail=F))
cidf = data.frame(
var   = c('y1', 'y2', 'y3', 'y4'),
lower = c(7.923, 7.105, 8.185, 8.157),
upper = c(9.22, 8.74, 9.54, 9.51)
)
require(ggplot2)
p1 <- ggplot(cidf) +
geom_errorbar(aes(x = var, ymin = lower, ymax = upper), width = 0.2)
p1 <- ggplot(cidf) +
geom_errorbar(aes(x = var, ymin = lower, ymax = upper), width = 0.2)
p1
p1 <- ggplot(cidf) +
geom_errorbar(aes(x = row.names(ciddf), ymin = lower, ymax = upper), width = 0.2) +
xlab("Variables") +
coord_flip() + opts(title = "Confidence intervals for Variables")
p1
p1 <- ggplot(cidf) +
geom_errorbar(aes(x = row.names(cidf), ymin = lower, ymax = upper), width = 0.2) +
xlab("Variables") +
coord_flip() + opts(title = "Confidence intervals for Variables")
p1
?unif
?runif
p=runif(1,0.3,0.8)
p=round(runif(1,0.3,0.8),2)
p=round(runif(1,0.3,0.8),3)
p=round(runif(1,0.3,0.8),2)
cidf = data.frame(
p=round(runif(1,0.3,0.8),2)
p=round(runif(1,0.3,0.8),2)
p=round(runif(1,0.3,0.8),2)
p=round(runif(1,0.3,0.8),2)
p=round(runif(1,0.3,0.8),2)
p=round(runif(1,0.3,0.8),2)
n=5
sample=rbinom(n,p)/n
?rbinom
sample=rbinom(n,n,p)/n
sample=rbinom(n,n,p)
sample=rbinom(n,n,p)
phat=sum(sample)/n
sample=rbinom(n,1,p)
sample=rbinom(n=n,size=1,p=p)
sample=rbinom(n=n,size=1,p=p)
sample=rbinom(n=1,size=n,p=p)
sample
sample=rbinom(n=n,size=1,p=p)
sample=rbinom(n=n,size=n,p=p)
sample=rbinom(n=1,size=n,p=p)
sample=rbinom(n=1,size=n,p=p)
phat=mean(sample)/n
sample=rbinom(n=1,size=n,p=p)
phat=mean(sample)/n
sample=rbinom(n=1,size=n,p=p)
n=10
sample=rbinom(n=1,size=n,p=p)
phat=mean(sample)/n
sample=rbinom(n=1,size=n,p=p)
phat=mean(sample)/n
sample=rbinom(n=1,size=n,p=p)
phat=mean(sample)/n
sample=rbinom(n=1,size=n,p=p)
phat=mean(sample)/n
se.phat=sqrt(phat*(1-phat)/n)
sample=rbinom(n=1,size=n,p=p)
phat=mean(sample)/n
se.phat=sqrt(phat*(1-phat)/n)
sample=rbinom(n=1,size=n,p=p)
phat=mean(sample)/n
se.phat=sqrt(phat*(1-phat)/n)
sample=rbinom(n=1,size=n,p=p)
phat=mean(sample)/n
se.phat=sqrt(phat*(1-phat)/n)
sample=rbinom(n=1,size=n,p=p)
phat=mean(sample)/n
se.phat=sqrt(phat*(1-phat)/n)
n=25
sample=rbinom(n=1,size=n,p=p)
phat=mean(sample)/n
se.phat=sqrt(phat*(1-phat)/n)
n=30
sample=rbinom(n=1,size=n,p=p)
phat=mean(sample)/n
se.phat=sqrt(phat*(1-phat)/n)
?pnorm
pnorm(0.8)
pnorm(0.8)-0.5
pnorm(0.24)
qnorm(0.8)-0.5
qnorm(0.24)
qnorm(0.8)
qnorm(0.24)
qnorm(0.9)
confint=c(phat-zstar*se.phat,phat+zstar*se.phat)
zstar=qnorm(0.9)
confint=c(phat-zstar*se.phat,phat+zstar*se.phat)
binomialnorm<-function(nsize,theta){
if (theta<0){
print("theta must be between 0 and 1")
}else if (theta >1){
print("theta must be between 0 and 1")
}else {
dataset<-rbinom(n=nsize,size=nsize,prob=theta)
return(dataset)
}}
binsample<-function(){
bn<-as.numeric(readline("How many times was the experiment run? (we need an 'n' here): "))
bp<-as.numeric(readline("What is the probability of success? (we need a 'p' here): "))
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-rbinom(n=bn,size=bn,prob=bp)
data<-binomialnorm(bn,bp)
datadf<-data.frame(data)
bmin<-qbinom(p=0.025, size=bn, prob=bp)
bmax<-qbinom(p=0.975, size=bn, prob=bp)
bins<-(bmax-bmin)/30
bmean=bn*bp
bsd=sqrt(bn*bp*(1-bp))
binhist<-ggplot(datadf,aes(data))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=bmean,sd=bsd),color="black",size=1)+
labs(x=paste("Binomial Random Variable with mean=np= ",bmean," and st.dev.=sqrt(np(1-p))= ",round(bsd,3)),y="Frequency")
}
binsamplein<-function(bn,bp){
bn<-as.numeric(bn)
bp<-as.numeric(bp)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-rbinom(n=bn,size=bn,prob=bp)
data<-binomialnorm(bn,bp)
bmin<-qbinom(p=0.025, size=bn, prob=bp)
bmax<-qbinom(p=0.975, size=bn, prob=bp)
bins<-(bmax-bmin)/30
datadf<-data.frame(data)
bmean=bn*bp
bsd=sqrt(bn*bp*(1-bp))
binhist<-ggplot(datadf,aes(data))+geom_histogram(aes(y=..density..),binwidth=bins,color='black',fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=bmean,sd=bsd),color="black",size=1)+
labs(x=paste("Counts when n = ",bn," and p = ",bp),y="Frequency")+ggtitle(paste("Binomial Random Variable with mean = np = ",bmean," and st.dev.= sqrt(np(1-p)) = ",round(bsd,3)))
}
normsample<-function(nreps,nmean,nsdev){
nreps<-as.numeric(nreps)
nmean<-as.numeric(nmean)
nsdev<-as.numeric(nsdev)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-rnorm(n=nreps,mean=nmean,sd=nsdev)
datadf<-data.frame(dataset)
nmin<-qnorm(p=0.025, mean=nmean,sd=nsdev)
nmax<-qnorm(p=0.975, mean=nmean,sd=nsdev)
leftline=nmean-nsdev
rightline=nmean+nsdev
leftdataval=quantile(dataset,leftq)
rightdataval=quantile(dataset,rightq)
bins<-(nmax-nmin)/30
binhist<-ggplot(datadf,aes(dataset))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=nmean,sd=nsdev),color="black",size=1)+
labs(x=paste("Normal Random Variable with mean= ",nmean," and st.dev.= ",round(nsdev,3)),y="Density")+
ggtitle("Illustration of the Empirical Rule with a normal distribution")+
geom_vline(xintercept=c(leftline,rightline), linetype="dashed")+
geom_vline(xintercept=c(leftdataval,rightdataval), linetype="solid")
}
unisample<-function(ureps,umin,umax){
ureps<-as.numeric(ureps)
umin<-as.numeric(umin)
umax<-as.numeric(umax)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-runif(n=ureps,min=umin,max=umax)
datadf<-data.frame(dataset)
umean=mean(dataset)
usdev=sd(dataset)
leftline=umean-usdev
rightline=umean+usdev
leftdataval=quantile(dataset,leftq)
rightdataval=quantile(dataset,rightq)
bins<-(umax-umin)/30
binhist<-ggplot(datadf,aes(dataset))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="#BDAEC6")
binhist+stat_function(fun=dnorm,args=list(mean=umean,sd=usdev),color="black",size=1)+
labs(x=paste("Uniform Random Variable with mean= ",umean," and st.dev.= ",round(usdev,3)),y="Density")+
geom_vline(xintercept=c(leftline,rightline), linetype="dashed")+
geom_vline(xintercept=c(leftdataval,rightdataval), linetype="solid")+
ggtitle("Illustration of the Empirical Rule with a uniform distribution")
}
unisample(1000,0,100)
dist=(pnorm(1)-pnorm(-1))/2
leftq=0.50-dist
rightq=0.50+dist
leftdataval=quantile(dataset,leftq)
rightdataval=quantile(dataset,rightq)
normsample(10000,150,25)
normsample(1000,150,25)
normsample(100,150,25)
normsample(10,150,2)
nmean=10
nsdev=3
unisample<-function(ureps,umin,umax){
ureps<-as.numeric(ureps)
umin<-as.numeric(umin)
umax<-as.numeric(umax)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-runif(n=ureps,min=umin,max=umax)
datadf<-data.frame(dataset)
umean=mean(dataset)
usdev=sd(dataset)
leftline=umean-usdev
rightline=umean+usdev
leftdataval=quantile(dataset,leftq)
rightdataval=quantile(dataset,rightq)
bins<-(umax-umin)/30
binhist<-ggplot(datadf,aes(dataset))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="#BDAEC6")
binhist+stat_function(fun=dnorm,args=list(mean=umean,sd=usdev),color="black",size=1)+
labs(x=paste("Uniform Random Variable with mean= ",umean," and st.dev.= ",round(usdev,3)),y="Density")+
geom_vline(xintercept=c(leftline,rightline), linetype="dashed")+
geom_vline(xintercept=c(leftdataval,rightdataval), linetype="solid")+
ggtitle("Illustration of the Empirical Rule with a uniform distribution")
}
unisample(1000,0,100)
binsamplein(100000,0.61)
binsamplein(10000,0.61)
binsamplein(1000,0.61)
binsamplein(100,0.61)
binsamplein(10,0.61)
binsamplein(1000,0.61)
binsamplein(1000,0.5)
binsamplein(1000,0.4)
binsamplein(1000,0.1)
binsamplein(1000,0.01)
binsamplein(1000,0.001)
binsamplein(1000,0.999)
normsample(10000,150,25)
normsample(1000,150,25)
normsample(100,150,25)
normsample(10,150,2)
unisample(1000,0,5)
unisample(50,0,100)
unisample(100,0,100)
unisample(1000,0,100)
unisample(10000,0,100)
unisample(100000,0,100)
require(ggplot2)
#Author: Daniel Walter
#This function creates numerous confidence intervals sampled from the binomial distribution
#estimating p. It randomly chooses a p for the true binomial distribution, then the confidence level,
#sample size, and number of confidence intervals to be plotted on the graph.
#Intervals that contain the parameter p are blue, and the intervals that miss
#the true population parameter p are red.
confints<-function(level,samsize,repnum){
level=as.numeric(level)
samsize=as.numeric(samsize)
repnum=as.numeric(repnum)
#Set it up for the random sampling
p=round(runif(1,0.30,0.70),2)
df = data.frame(matrix(vector(), 0, 5, dimnames=list(c(), c("Reps", "Min","Phat", "Max","Found"))), stringsAsFactors=F)
#Run and create confidence interval ranges for this.
for (i in 1:repnum){
sample=rbinom(n=1,size=samsize,p=p)
phat=mean(sample)/samsize
se.phat=sqrt(phat*(1-phat)/samsize)
levpercentile<-1-((1-level)/2)
zstar=qnorm(levpercentile)
min=phat-zstar*se.phat
max=min(phat+zstar*se.phat,1)
found<-'Population Parameter Not in Interval'
if ((min<p)&&(max>p)) found<-'Population Parameter in Interval'
names<-c("Reps","Min","Phat","Max","Found")
af<-data.frame(i,min,phat,max,found)
names(af)<-names
df<-rbind(df,af)
}
p1 <- ggplot(df)+ geom_pointrange(aes(x=Reps,y=Phat,ymin=Min,ymax=Max,color=Found))+
geom_hline(y=p)+ xlab("Repetitions of the confidence interval creation procedure")+ylab("Confidence intervals for phat")+
ggtitle(paste(level*100,"% confidence intervals for sample size",samsize,": ",repnum,"intervals"))+
scale_color_manual(values=c('Population Parameter Not in Interval'="#FF5C5C",'Population Parameter in Interval'='#4682B4'))
p1
}
#These first example runs with a level of 0.95, a sample size of 100,
#and creates 30 confidence intervals
thing<-confints(0.95,100,30)
confints(0.80,1000,100)
confints(0.80,1000,100)
confints(0.95,100,30)
setwd("C:\Users\Daniel\Dropbox\Work\atlas")
setwd("C:/Users/Dropbox/Work/atlas")
setwd("C:/Users/Dropbox/Work/atlas/")
setwd("C:\\Users\\Dropbox\\Work\\atlas\\")
setwd("C://Users/Dropbox/Work/atlas/")
require(ggplot2)
#Author: Daniel Walter
#This function creates numerous confidence intervals sampled from the binomial distribution
#estimating p. It randomly chooses a p for the true binomial distribution, then the confidence level,
#sample size, and number of confidence intervals to be plotted on the graph.
#Intervals that contain the parameter p are blue, and the intervals that miss
#the true population parameter p are red.
confints<-function(level,samsize,repnum){
level=as.numeric(level)
samsize=as.numeric(samsize)
repnum=as.numeric(repnum)
#Set it up for the random sampling
p=round(runif(1,0.30,0.70),2)
df = data.frame(matrix(vector(), 0, 5, dimnames=list(c(), c("Reps", "Min","Phat", "Max","Found"))), stringsAsFactors=F)
#Run and create confidence interval ranges for this.
for (i in 1:repnum){
sample=rbinom(n=1,size=samsize,p=p)
phat=mean(sample)/samsize
se.phat=sqrt(phat*(1-phat)/samsize)
levpercentile<-1-((1-level)/2)
zstar=qnorm(levpercentile)
min=phat-zstar*se.phat
max=min(phat+zstar*se.phat,1)
found<-'Population Parameter Not in Interval'
if ((min<p)&&(max>p)) found<-'Population Parameter in Interval'
names<-c("Reps","Min","Phat","Max","Found")
af<-data.frame(i,min,phat,max,found)
names(af)<-names
df<-rbind(df,af)
}
p1 <- ggplot(df)+ geom_pointrange(aes(x=Reps,y=Phat,ymin=Min,ymax=Max,color=Found))+
geom_hline(y=p)+ xlab("Repetitions of the confidence interval creation procedure")+ylab("Confidence intervals for phat")+
ggtitle(paste(level*100,"% confidence intervals for sample size",samsize,": ",repnum,"intervals"))+
scale_color_manual(values=c('Population Parameter Not in Interval'="#FF5C5C",'Population Parameter in Interval'='#4682B4'))
p1
}
#These first example runs with a level of 0.95, a sample size of 100,
#and creates 30 confidence intervals
thing<-confints(0.95,100,30)
confints(0.80,1000,100)
confints(0.2,30,25)
confints(0.99,30,25)
confints(0.90,30,25)
confints(0.90,30,25)
q()
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
shiny::runApp('GitHub/stat-dist-r/twonorm')
library(shinyapps)
install.package("shinyapps")
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
getwd()
setwd("~/GitHub/stat-dist-r/twonorm")
setwd("~/GitHub/stat-dist-r")
deployapp()
deployApp()
shinyapps::setAccountInfo(name='dswalter', token='24F4E34F081B3B119084089D919EB798', secret='Aih01jigLVnTnOUMwsoahm9PQiW7AXvvpossHOZT')
deployApp()
setwd("~/GitHub/stat-dist-r/twonorm")
deployApp()
