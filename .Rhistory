#}else {
dataset<-rnorm(n=nreps,mean=nmean,sd=nsdev)
datadf<-data.frame(dataset)
nmin<-qnorm(p=0.025, mean=nmean,sd=nsdev)
nmax<-qnorm(p=0.975, mean=nmean,sd=nsdev)
leftline=nmean-nsdev
rightline=nmean+nsdev
bins<-(nmax-nmin)/30
binhist<-ggplot(datadf,aes(dataset))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=nmean,sd=nsdev),color="black",size=1)+
labs(x=paste("Normal Random Variable with mean= ",nmean," and st.dev.= ",round(nsdev,3)),y="Density")+
geom_vline(xintercept=c(leftline,rightline), linetype="dotted")
}
normsample(10000,150,25)
normsample<-function(nreps,nmean,nsdev){
nreps<-as.numeric(nreps)
nmean<-as.numeric(nmean)
nsdev<-as.numeric(nsdev)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-rnorm(n=nreps,mean=nmean,sd=nsdev)
datadf<-data.frame(dataset)
nmin<-qnorm(p=0.025, mean=nmean,sd=nsdev)
nmax<-qnorm(p=0.975, mean=nmean,sd=nsdev)
leftline=nmean-nsdev
rightline=nmean+nsdev
bins<-(nmax-nmin)/30
binhist<-ggplot(datadf,aes(dataset))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=nmean,sd=nsdev),color="black",size=1)+
labs(x=paste("Normal Random Variable with mean= ",nmean," and st.dev.= ",round(nsdev,3)),y="Density")+
geom_vline(xintercept=c(leftline,rightline), linetype="dashed")
}
normsample(10000,150,25)
?quantile
leftdataval=quantile(dataset,leftq)
normsample<-function(nreps,nmean,nsdev){
nreps<-as.numeric(nreps)
nmean<-as.numeric(nmean)
nsdev<-as.numeric(nsdev)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-rnorm(n=nreps,mean=nmean,sd=nsdev)
datadf<-data.frame(dataset)
nmin<-qnorm(p=0.025, mean=nmean,sd=nsdev)
nmax<-qnorm(p=0.975, mean=nmean,sd=nsdev)
leftline=nmean-nsdev
rightline=nmean+nsdev
leftdataval=quantile(dataset,leftq)
rightdataval=quantile(dataset,rightq)
bins<-(nmax-nmin)/30
binhist<-ggplot(datadf,aes(dataset))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=nmean,sd=nsdev),color="black",size=1)+
labs(x=paste("Normal Random Variable with mean= ",nmean," and st.dev.= ",round(nsdev,3)),y="Density")+
geom_vline(xintercept=c(leftline,rightline), linetype="dashed")+
geom_vline(xintercept=c(leftdataval,rightdataval), linetype="solid")
}
normsample(10000,150,25)
normsample(10000,150,25)
normsample(1000,150,25)
normsample(100,150,25)
normsample(10,150,25)
normsample(1000,150,25)
normsample(1000,150,25)
normsample(10000,150,25)
normsample(1000,150,25)
normsample(100,150,25)
normsample(10,150,25)
normsample(10,150,2)
normsample(10000,150,25)
normsample(1000,150,25)
normsample(100,150,25)
normsample(10,150,2)
binsamplein(100000,0.61)
#So I need my random sample from a binomial distribution. Let's use a good one first.
library(ggplot2)
library(ggthemes)
binomialnorm<-function(nsize,theta){
if (theta<0){
print("theta must be between 0 and 1")
}else if (theta >1){
print("theta must be between 0 and 1")
}else {
dataset<-rbinom(n=nsize,size=nsize,prob=theta)
return(dataset)
}}
binsample<-function(){
bn<-as.numeric(readline("How many times was the experiment run? (we need an 'n' here): "))
bp<-as.numeric(readline("What is the probability of success? (we need a 'p' here): "))
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-rbinom(n=bn,size=bn,prob=bp)
data<-binomialnorm(bn,bp)
datadf<-data.frame(data)
bmin<-qbinom(p=0.025, size=bn, prob=bp)
bmax<-qbinom(p=0.975, size=bn, prob=bp)
bins<-(bmax-bmin)/30
bmean=bn*bp
bsd=sqrt(bn*bp*(1-bp))
binhist<-ggplot(datadf,aes(data))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=bmean,sd=bsd),color="black",size=1)+
labs(x=paste("Binomial Random Variable with mean=np= ",bmean," and st.dev.=sqrt(np(1-p))= ",round(bsd,3)),y="Frequency")
}
binsamplein<-function(bn,bp){
bn<-as.numeric(bn)
bp<-as.numeric(bp)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-rbinom(n=bn,size=bn,prob=bp)
data<-binomialnorm(bn,bp)
bmin<-qbinom(p=0.025, size=bn, prob=bp)
bmax<-qbinom(p=0.975, size=bn, prob=bp)
bins<-(bmax-bmin)/30
datadf<-data.frame(data)
bmean=bn*bp
bsd=sqrt(bn*bp*(1-bp))
binhist<-ggplot(datadf,aes(data))+geom_histogram(aes(y=..density..),binwidth=bins,color='black',fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=bmean,sd=bsd),color="black",size=1)+
labs(x=paste("Counts when n = ",bn," and p = ",bp),y="Frequency")+ggtitle(paste("Binomial Random Variable with mean = np = ",bmean," and st.dev.= sqrt(np(1-p)) = ",round(bsd,3)))
}
binsamplein(100000,0.61)
binsamplein(10000,0.61)
binsamplein(1000,0.61)
binsamplein(100,0.61)
binsamplein(10,0.61)
binsamplein(1000,0.5)
binsamplein(1000,0.4)
binsamplein(1000,0.1)
binsamplein(1000,0.01)
binsamplein(1000,0.001)
binsamplein(1000,0.999)
?runif
unisample<-function(ureps,umin,umax){
ureps<-as.numeric(nreps)
umin<-as.numeric(umin)
umax<-as.numeric(umax)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-runif(n=nreps,min=umin,max=umax)
datadf<-data.frame(dataset)
umean=mean(dataset)
usdev=sdev(dataset)
leftline=umean-usdev
rightline=umean+usdev
leftdataval=quantile(dataset,leftq)
rightdataval=quantile(dataset,rightq)
bins<-(umax-umin)/30
binhist<-ggplot(datadf,aes(dataset))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=umean,sd=usdev),color="black",size=1)+
labs(x=paste("Uniform Random Variable with mean= ",umean," and st.dev.= ",round(usdev,3)),y="Density")+
geom_vline(xintercept=c(leftline,rightline), linetype="dashed")+
geom_vline(xintercept=c(leftdataval,rightdataval), linetype="solid")
}
unisample(1000,0,100)
unisample<-function(ureps,umin,umax){
ureps<-as.numeric(ureps)
umin<-as.numeric(umin)
umax<-as.numeric(umax)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-runif(n=ureps,min=umin,max=umax)
datadf<-data.frame(dataset)
umean=mean(dataset)
usdev=sdev(dataset)
leftline=umean-usdev
rightline=umean+usdev
leftdataval=quantile(dataset,leftq)
rightdataval=quantile(dataset,rightq)
bins<-(umax-umin)/30
binhist<-ggplot(datadf,aes(dataset))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=umean,sd=usdev),color="black",size=1)+
labs(x=paste("Uniform Random Variable with mean= ",umean," and st.dev.= ",round(usdev,3)),y="Density")+
geom_vline(xintercept=c(leftline,rightline), linetype="dashed")+
geom_vline(xintercept=c(leftdataval,rightdataval), linetype="solid")
}
unisample(1000,0,100)
?stdev
unisample<-function(ureps,umin,umax){
ureps<-as.numeric(ureps)
umin<-as.numeric(umin)
umax<-as.numeric(umax)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-runif(n=ureps,min=umin,max=umax)
datadf<-data.frame(dataset)
umean=mean(dataset)
usdev=sd(dataset)
leftline=umean-usdev
rightline=umean+usdev
leftdataval=quantile(dataset,leftq)
rightdataval=quantile(dataset,rightq)
bins<-(umax-umin)/30
binhist<-ggplot(datadf,aes(dataset))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=umean,sd=usdev),color="black",size=1)+
labs(x=paste("Uniform Random Variable with mean= ",umean," and st.dev.= ",round(usdev,3)),y="Density")+
geom_vline(xintercept=c(leftline,rightline), linetype="dashed")+
geom_vline(xintercept=c(leftdataval,rightdataval), linetype="solid")
}
unisample(1000,0,100)
unisample(1000,0,100)
unisample(10000,0,100)
unisample(100000,0,100)
unisample(1000,0,10)
unisample(10000,0,100)
unisample(100000,0,100)
unisample(1000,0,5)
unisample(50,0,100)
unisample(100,0,100)
unisample(1000,0,100)
unisample(10000,0,100)
unisample(100000,0,100)
normsample(10000,150,25)
normsample(1000,150,25)
normsample(100,150,25)
normsample(10000,150,25)
normsample(1000,150,25)
normsample(100,150,25)
normsample(10,150,2)
unisample(1000,0,5)
unisample(50,0,100)
unisample(100,0,100)
unisample(1000,0,100)
unisample(10000,0,100)
unisample(100000,0,100)
unisample<-function(ureps,umin,umax){
ureps<-as.numeric(ureps)
umin<-as.numeric(umin)
umax<-as.numeric(umax)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-runif(n=ureps,min=umin,max=umax)
datadf<-data.frame(dataset)
umean=mean(dataset)
usdev=sd(dataset)
leftline=umean-usdev
rightline=umean+usdev
leftdataval=quantile(dataset,leftq)
rightdataval=quantile(dataset,rightq)
bins<-(umax-umin)/30
binhist<-ggplot(datadf,aes(dataset))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=umean,sd=usdev),color="black",size=1)+
labs(x=paste("Uniform Random Variable with mean= ",umean," and st.dev.= ",round(usdev,3)),y="Density")+
geom_vline(xintercept=c(leftline,rightline), linetype="dashed")+
geom_vline(xintercept=c(leftdataval,rightdataval), linetype="solid")+
ggtitle("Illustration of the Empirical Rule with a uniform distribution")
}
unisample(1000,0,100)
normsample<-function(nreps,nmean,nsdev){
nreps<-as.numeric(nreps)
nmean<-as.numeric(nmean)
nsdev<-as.numeric(nsdev)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-rnorm(n=nreps,mean=nmean,sd=nsdev)
datadf<-data.frame(dataset)
nmin<-qnorm(p=0.025, mean=nmean,sd=nsdev)
nmax<-qnorm(p=0.975, mean=nmean,sd=nsdev)
leftline=nmean-nsdev
rightline=nmean+nsdev
leftdataval=quantile(dataset,leftq)
rightdataval=quantile(dataset,rightq)
bins<-(nmax-nmin)/30
binhist<-ggplot(datadf,aes(dataset))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=nmean,sd=nsdev),color="black",size=1)+
labs(x=paste("Normal Random Variable with mean= ",nmean," and st.dev.= ",round(nsdev,3)),y="Density")+
ggtitle("Illustration of the Empirical Rule with a normal distribution")+
geom_vline(xintercept=c(leftline,rightline), linetype="dashed")+
geom_vline(xintercept=c(leftdataval,rightdataval), linetype="solid")
}
normsample(10000,150,25)
library(ggplot2)
library(ggthemes)
normsample<-function(nreps,nmean,nsdev){
nreps<-as.numeric(nreps)
nmean<-as.numeric(nmean)
nsdev<-as.numeric(nsdev)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-rnorm(n=nreps,mean=nmean,sd=nsdev)
datadf<-data.frame(dataset)
nmin<-qnorm(p=0.025, mean=nmean,sd=nsdev)
nmax<-qnorm(p=0.975, mean=nmean,sd=nsdev)
leftline=nmean-nsdev
rightline=nmean+nsdev
leftdataval=quantile(dataset,leftq)
rightdataval=quantile(dataset,rightq)
bins<-(nmax-nmin)/30
binhist<-ggplot(datadf,aes(dataset))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=nmean,sd=nsdev),color="black",size=1)+
labs(x=paste("Normal Random Variable with mean= ",nmean," and st.dev.= ",round(nsdev,3)),y="Density")+
ggtitle("Illustration of the Empirical Rule with a normal distribution")+
geom_vline(xintercept=c(leftline,rightline), linetype="dashed")+
geom_vline(xintercept=c(leftdataval,rightdataval), linetype="solid")
}
dist=(pnorm(1)-pnorm(-1))/2
leftq=0.50-dist
rightq=0.50+dist
leftdataval=quantile(dataset,leftq)
rightdataval=quantile(dataset,rightq)
normsample(10000,150,25)
normsample(1000,150,25)
normsample(100,150,25)
normsample(10,150,2)
nmean=10
nsdev=3
unisample<-function(ureps,umin,umax){
ureps<-as.numeric(ureps)
umin<-as.numeric(umin)
umax<-as.numeric(umax)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-runif(n=ureps,min=umin,max=umax)
datadf<-data.frame(dataset)
umean=mean(dataset)
usdev=sd(dataset)
leftline=umean-usdev
rightline=umean+usdev
leftdataval=quantile(dataset,leftq)
rightdataval=quantile(dataset,rightq)
bins<-(umax-umin)/30
binhist<-ggplot(datadf,aes(dataset))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="#BDAEC6")
binhist+stat_function(fun=dnorm,args=list(mean=umean,sd=usdev),color="black",size=1)+
labs(x=paste("Uniform Random Variable with mean= ",umean," and st.dev.= ",round(usdev,3)),y="Density")+
geom_vline(xintercept=c(leftline,rightline), linetype="dashed")+
geom_vline(xintercept=c(leftdataval,rightdataval), linetype="solid")+
ggtitle("Illustration of the Empirical Rule with a uniform distribution")
}
normsample(10000,150,25)
normsample(1000,150,25)
normsample(10,150,2)
normsample(1000,150,25)
normsample(10000,150,25)
unisample(10000,0,100)
unisample(100000,0,100)
library(ggplot2)
library(ggthemes)
normsample<-function(nreps,nmean,nsdev){
nreps<-as.numeric(nreps)
nmean<-as.numeric(nmean)
nsdev<-as.numeric(nsdev)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-rnorm(n=nreps,mean=nmean,sd=nsdev)
datadf<-data.frame(dataset)
nmin<-qnorm(p=0.025, mean=nmean,sd=nsdev)
nmax<-qnorm(p=0.975, mean=nmean,sd=nsdev)
leftline=nmean-nsdev
rightline=nmean+nsdev
leftdataval=quantile(dataset,leftq)
rightdataval=quantile(dataset,rightq)
bins<-(nmax-nmin)/30
binhist<-ggplot(datadf,aes(dataset))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=nmean,sd=nsdev),color="black",size=1)+
labs(x=paste("Normal Random Variable with mean= ",nmean," and st.dev.= ",round(nsdev,3)),y="Density")+
ggtitle("Illustration of the Empirical Rule with a normal distribution")+
geom_vline(xintercept=c(leftline,rightline), linetype="dashed")+
geom_vline(xintercept=c(leftdataval,rightdataval), linetype="solid")
}
dist=(pnorm(1)-pnorm(-1))/2
leftq=0.50-dist
rightq=0.50+dist
leftdataval=quantile(dataset,leftq)
rightdataval=quantile(dataset,rightq)
normsample(10000,150,25)
normsample(1000,150,25)
normsample(100,150,25)
normsample(10,150,2)
nmean=10
nsdev=3
unisample<-function(ureps,umin,umax){
ureps<-as.numeric(ureps)
umin<-as.numeric(umin)
umax<-as.numeric(umax)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-runif(n=ureps,min=umin,max=umax)
datadf<-data.frame(dataset)
umean=mean(dataset)
usdev=sd(dataset)
leftline=umean-usdev
rightline=umean+usdev
leftdataval=quantile(dataset,leftq)
rightdataval=quantile(dataset,rightq)
bins<-(umax-umin)/30
binhist<-ggplot(datadf,aes(dataset))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="#BDAEC6")
binhist+stat_function(fun=dnorm,args=list(mean=umean,sd=usdev),color="black",size=1)+
labs(x=paste("Uniform Random Variable with mean= ",umean," and st.dev.= ",round(usdev,3)),y="Density")+
geom_vline(xintercept=c(leftline,rightline), linetype="dashed")+
geom_vline(xintercept=c(leftdataval,rightdataval), linetype="solid")+
ggtitle("Illustration of the Empirical Rule with a uniform distribution")
}
library(ggplot2)
library(ggthemes)
binomialnorm<-function(nsize,theta){
if (theta<0){
print("theta must be between 0 and 1")
}else if (theta >1){
print("theta must be between 0 and 1")
}else {
dataset<-rbinom(n=nsize,size=nsize,prob=theta)
return(dataset)
}}
binsample<-function(){
bn<-as.numeric(readline("How many times was the experiment run? (we need an 'n' here): "))
bp<-as.numeric(readline("What is the probability of success? (we need a 'p' here): "))
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-rbinom(n=bn,size=bn,prob=bp)
data<-binomialnorm(bn,bp)
datadf<-data.frame(data)
bmin<-qbinom(p=0.025, size=bn, prob=bp)
bmax<-qbinom(p=0.975, size=bn, prob=bp)
bins<-(bmax-bmin)/30
bmean=bn*bp
bsd=sqrt(bn*bp*(1-bp))
binhist<-ggplot(datadf,aes(data))+geom_histogram(aes(y=..density..),binwidth=bins,color="black",fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=bmean,sd=bsd),color="black",size=1)+
labs(x=paste("Binomial Random Variable with mean=np= ",bmean," and st.dev.=sqrt(np(1-p))= ",round(bsd,3)),y="Frequency")
}
binsamplein<-function(bn,bp){
bn<-as.numeric(bn)
bp<-as.numeric(bp)
#if (bp<0){
# print("theta must be between 0 and 1")
#}else if (bp >1){
# print("theta must be between 0 and 1")
#}else {
dataset<-rbinom(n=bn,size=bn,prob=bp)
data<-binomialnorm(bn,bp)
bmin<-qbinom(p=0.025, size=bn, prob=bp)
bmax<-qbinom(p=0.975, size=bn, prob=bp)
bins<-(bmax-bmin)/30
datadf<-data.frame(data)
bmean=bn*bp
bsd=sqrt(bn*bp*(1-bp))
binhist<-ggplot(datadf,aes(data))+geom_histogram(aes(y=..density..),binwidth=bins,color='black',fill="light blue")
binhist+stat_function(fun=dnorm,args=list(mean=bmean,sd=bsd),color="black",size=1)+
labs(x=paste("Counts when n = ",bn," and p = ",bp),y="Frequency")+ggtitle(paste("Binomial Random Variable with mean = np = ",bmean," and st.dev.= sqrt(np(1-p)) = ",round(bsd,3)))
}
binsamplein(100000,0.61)
binsamplein(10000,0.61)
binsamplein(1000,0.61)
binsamplein(100,0.61)
binsamplein(10,0.61)
binsamplein(1000,0.5)
binsamplein(1000,0.4)
binsamplein(1000,0.1)
binsamplein(1000,0.01)
binsamplein(1000,0.001)
binsamplein(1000,0.999)
normsample(10000,150,25)
normsample(1000,150,25)
normsample(100,150,25)
normsample(10,150,2)
unisample(1000,0,5)
unisample(50,0,100)
unisample(100,0,100)
unisample(1000,0,100)
unisample(10000,0,100)
unisample(100000,0,100)
x<-5
y<-3
x*y
setwd("~/GitHub/stat-dist-r")
library(shiny)
runApp("binomial")
shiny::runApp('binomial')
shiny::runApp('binomial')
shiny::runApp('binomial')
shiny::runApp('introbinomial')
shiny::runApp('introbinomial')
